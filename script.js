document.addEventListener('DOMContentLoaded', () => {
    const popup = document.getElementById('cookie-popup');
    const acceptButton = document.getElementById('continue');
    const declineButton = document.getElementById('decline-cookies');
    const accept = document.getElementById('accept');
    const ad = document.getElementById('bouncing-ad');
    const answer = document.getElementById('findprincessAnswer');
    const princessImage = document.getElementById('princessImage');
    const princessXl = document.getElementById('findprincessxl');
    const princessLg = document.getElementById('findprincesslg');
    const princessSm = document.getElementById('findprincesssm');
    const princessAns = document.getElementById('findprincessAnswer');
    const farSound = document.getElementById('farSound');
    const normalSound = document.getElementById('normalSound');
    const nearSound = document.getElementById('nearSound');
    const veryNearSound = document.getElementById('veryNearSound');
    const container = document.getElementById('animation-container');

    // Initial position and speed (in pixels per frame)
    let posX = 0;
    let posY = 0;
    let speedX = 3;  // Horizontal speed
    let speedY = 3.5; // Vertical speed (slightly different for an interesting bounce)

    // Frame update function
    function moveAd() {
        // 1. Get current window and ad dimensions
        const windowWidth = window.innerWidth;
        const windowHeight = window.innerHeight;
        const adWidth = ad.offsetWidth;
        const adHeight = ad.offsetHeight;

        // 2. Update position based on current speed
        posX += speedX;
        posY += speedY;

        // 3. Boundary Detection (Left/Right)
        if (posX + adWidth >= windowWidth || posX <= 0) {
            speedX *= -1; // Reverse horizontal direction
            // Keep the ad within bounds if it slightly overshoots
            posX = Math.max(0, Math.min(posX, windowWidth - adWidth));
        }

        // 4. Boundary Detection (Top/Bottom)
        if (posY + adHeight >= windowHeight || posY <= 0) {
            speedY *= -1; // Reverse vertical direction
            // Keep the ad within bounds if it slightly overshoots
            posY = Math.max(0, Math.min(posY, windowHeight - adHeight));
        }

        // 5. Apply new position using CSS 'transform' for better performance
        ad.style.transform = `translate(${posX}px, ${posY}px)`;

        // Request the next frame to keep the animation smooth
        requestAnimationFrame(moveAd);
    }

    // Start the animation loop when the window is loaded
    //requestAnimationFrame(moveAd);

    // Optional: Add a function to close the ad when clicked
    ad.addEventListener('click', () => {
        ad.style.display = 'none';
        window.open('./pages/rainbow.html', '_blank');
    });

    if (localStorage.getItem('cookies-accepted') !== 'true') {

        setTimeout(() => {
            popup.classList.remove('translate-y-full', 'opacity-0');
            popup.classList.add('translate-y-0', 'opacity-100');
        }, 500);
    }


    acceptButton.addEventListener('click', () => {

        // localStorage.setItem('cookies-accepted', 'true');

        // popup.classList.remove('translate-y-0', 'opacity-100');
        // popup.classList.add('translate-y-full', 'opacity-0');

        window.open('./pages/whatareyoucontinuing.html', '_blank');

    });

    accept.addEventListener('click', () => {

        // localStorage.setItem('cookies-accepted', 'true');

        popup.classList.remove('translate-y-0', 'opacity-100');
        popup.classList.add('translate-y-full', 'opacity-0', 'hidden');

        window.open('./pages/thankyouforaccepting.html', '_blank');

        ad.classList.remove('hidden');
        ad.classList.add('block');
        requestAnimationFrame(moveAd);
    });

    declineButton.addEventListener('click', () => {


        // popup.classList.remove('translate-y-0', 'opacity-100');
        // popup.classList.add('translate-y-full', 'opacity-0');

        window.open('./pages/whydidyoudecline.html', '_blank');

    });

    // Warn user when they try to leave the page
    window.onbeforeunload = function () {
        return "";
    };

    answer.addEventListener('click', () => {
        princessImage.classList.remove('hidden');
        princessImage.classList.add('flex');
    });

    window.addEventListener('message', (event) => {
        // „É≠„Éº„Ç´„É´„Éï„Ç°„Ç§„É´Áí∞Â¢É„Åß„ÅØ event.origin „ÅØ 'file://' „Åæ„Åü„ÅØ 'null' „ÅÆÂ†¥Âêà„ÅåÂ§ö„ÅÑ
        if (event.origin === 'file://' || event.origin === 'null') {
            // ‰ø°È†º„Åß„Åç„Çã„É≠„Éº„Ç´„É´„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂ†¥Âêà„ÅÆ„ÅøÂá¶ÁêÜ
            console.log("„Ç´„Çπ„Çø„É†„Ç§„Éô„É≥„Éà„ÇíÊ§úÁü•„Åó„Åæ„Åó„ÅüÔºÅ");

            princessXl.addEventListener('mouseenter', () => {
                play(farSound);
            });
            princessXl.addEventListener('mouseleave', () => {
                stop(farSound);
            });
            princessLg.addEventListener('mouseenter', () => {
                play(nearSound, 1.4);
            });
            princessLg.addEventListener('mouseleave', () => {
                stop(nearSound, 1.4);
            });
            princessSm.addEventListener('mouseenter', () => {
                play(normalSound, 1.8);
            });
            princessSm.addEventListener('mouseleave', () => {
                stop(normalSound, 1.8);
            });
            princessAns.addEventListener('mouseenter', () => {
                play(veryNearSound, 3);
            });
            princessAns.addEventListener('mouseleave', () => {
                stop(veryNearSound, 3);
            });

        } else {
            console.log("reject", event.detail.message);
            return;
        }
    });

    princessAns.addEventListener('click', () => {
        const elements = container.querySelectorAll('.fallen-element');
        const congratulations = document.getElementById('congratulations');

        elements.forEach((element, index) => {
            // ----------------------------------------------------
            // 1. ÂêÑË¶ÅÁ¥†„Çí absolute „Å´„Åó„Å¶„ÄÅÁèæÂú®„ÅÆ‰ΩçÁΩÆ„ÇíÂõ∫ÂÆö
            // ----------------------------------------------------
            const rect = element.getBoundingClientRect();

            // üí° ÁîªÈù¢‰∏ãÁ´Ø„Åæ„Åß„ÅÆÁßªÂãïÈáè„ÇíË®àÁÆó
            // window.innerHeight = ÁîªÈù¢„ÅÆÊúÄ‰∏ãÈÉ®„ÅÆYÂ∫ßÊ®ô
            // rect.top = Ë¶ÅÁ¥†„ÅÆ‰∏äËæ∫„ÅÆYÂ∫ßÊ®ô
            // ÁßªÂãïÈáè = ÁîªÈù¢‰∏ãÈÉ® - Ë¶ÅÁ¥†„ÅÆÁèæÂú®‰ΩçÁΩÆ + Ë¶ÅÁ¥†Ëá™Ë∫´„ÅÆÈ´ò„ÅïÔºàÁîªÈù¢‰∏ãÁ´Ø„Å´Âêà„Çè„Åõ„Çã„Åü„ÇÅÔºâ
            const deltaY = window.innerHeight - rect.top;

            // Tailwind„ÅÆ‰ªªÊÑè„ÅÆÂÄ§ ([...]) „Çí‰Ωø„Å£„Å¶„Ç§„É≥„É©„Ç§„É≥CSS„ÇíË®≠ÂÆö
            element.classList.add(
                'absolute',
                'z-[1000]', // ÊâãÂâç„Å´Âá∫„Åô
                'transition-all', // ÂÖ®„Å¶„ÅÆ„Éó„É≠„Éë„ÉÜ„Ç£„Å´„Éà„É©„É≥„Ç∏„Ç∑„Éß„É≥„ÇíÈÅ©Áî®
                'ease-in',     // Âä†ÈÄü„Åó„Å™„Åå„ÇâËêΩ„Å°„Çã
                `duration-[1500ms]`,
                `top-[${rect.top}px]`,
                `left-[${rect.left}px]`
            );

            // ÂÖÉ„ÅÆ‰ΩçÁΩÆÊåáÂÆö„ÇØ„É©„Çπ„ÅØÂâäÈô§„Åó„ÄÅ„Éû„Éº„Ç∏„É≥„ÇÇ„É™„Çª„ÉÉ„Éà
            element.classList.remove('relative', 'flex', 'm-4', 'gap-4', 'w-full', 'h-full');
            element.style.margin = '0';

            // ----------------------------------------------------
            // 2. „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÇíÈñãÂßã
            // ----------------------------------------------------
            const delay = index * 100; // 0.1s „Åö„Å§ÈÅÖÂª∂
            element.style.transitionDelay = `${delay}ms`;

            // ÁîªÈù¢‰∏ãÁ´Ø„Åæ„Åß„ÅÆÁßªÂãï„Å®ÂõûËª¢„ÇíÈÅ©Áî®
            element.classList.add(
                `translate-y-[${deltaY}px]`, // Ë®àÁÆó„Åï„Çå„ÅüÁßªÂãïÈáè
                'rotate-[360deg]' // ËêΩ‰∏ã‰∏≠„Å´‰∏ÄÂõûËª¢
            );

            // ----------------------------------------------------
            // 3. „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂÆå‰∫ÜÂæå„Å´ÈùôÊ≠¢„Åï„Åõ„Çã
            // ----------------------------------------------------
            setTimeout(() => {
                // 1. „Éà„É©„É≥„Ç∏„Ç∑„Éß„É≥„Çí‰∏ÄÊó¶Ëß£Èô§
                element.style.transition = 'none';

                // 2. absolute „ÇíËß£Èô§„Åó„ÄÅfixed „Åß‰∏ãÈÉ®„Å´Âõ∫ÂÆö
                element.classList.remove(
                    'absolute',
                    `top-[${rect.top}px]`,
                    `left-[${rect.left}px]`,
                    `translate-y-[${deltaY}px]`, // transformËß£Èô§
                    'rotate-[360deg]'
                );

                // 3. ÁîªÈù¢‰∏ãÈÉ®„Å´ÈõÜ„ÇÅ„Çã„Åü„ÇÅ„ÅÆÂõ∫ÂÆö„ÇØ„É©„Çπ„ÇíËøΩÂä†
                // ÁîªÈù¢‰∏≠Â§Æ„Å´ÈõÜ„ÇÅ„ÄÅbottom: 0 „ÅßÂõ∫ÂÆö
                element.classList.add('fixed', 'bottom-0', 'left-1/2', '-translate-x-1/2', 'z-[20]');

                // („Ç™„Éó„Ç∑„Éß„É≥) Âõ∫ÂÆöÂæå„Å´„Çè„Åö„Åã„Å´‰∏ä„Å∏„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„Åï„Åõ„Çã
                // „Åô„Åê„Å´ transform „Çí„É™„Çª„ÉÉ„Éà„Åô„Çã„Åì„Å®„Åß„ÄÅË¶ÅÁ¥†„ÅåÁîªÈù¢‰∏ãÁ´Ø„Å´ÁßªÂãï„Åó„ÄÅ
                // „Åù„ÅÆÂæå translate-y-[-1rem] „ÅåÂäπ„ÅÑ„Å¶‰∏ã„Åã„Çâ„Éï„ÉØ„ÉÉ„Å®ÊµÆ„Åã„Å≥‰∏ä„Åå„Çä„Åæ„Åô
                setTimeout(() => {
                    element.style.transition = 'transform 0.3s ease-out';
                    element.classList.add('translate-y-[-1rem]'); // ÁîªÈù¢‰∏ã„Åã„ÇâÂ∞ë„ÅóÊµÆ„Åã„Åõ„Çã
                }, 50);

                congratulations.classList.remove('hidden');
                congratulations.classList.add('absolute', 'top-0', 'left-[30rem]', 'z-50');
            }, 1500 + delay);
        });

        // ÂÖ®Ë¶ÅÁ¥†„ÅÆÂá¶ÁêÜÂÆå‰∫ÜÂæå„Å´„Éú„Çø„É≥„ÇíÊúâÂäπÂåñ (ÊúÄÈï∑„ÅÆ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÊôÇÈñì„ÇíÂü∫Ê∫ñ)
        setTimeout(() => {
            destroyBtn.disabled = false;
            destroyBtn.textContent = 'ËêΩ‰∏ã„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÇíÂÜçÈñã';
            destroyBtn.classList.remove('opacity-50', 'cursor-not-allowed');
        }, 1500 + boxes.length * 100);
    });

    function play(element, speed = 1) {
        // ÁèæÂú®„ÅÆÂÜçÁîü‰ΩçÁΩÆ„Çí„É™„Çª„ÉÉ„Éà
        element.currentTime = 0;

        // „É´„Éº„ÉóÂÜçÁîü„ÇíÊúâÂäπ„Å´„Åô„Çã
        element.loop = true;

        element.playbackRate = speed;

        // ÂÜçÁîü„ÇíÈñãÂßã
        const playPromise = element.play();

        // play()„ÅØPromise„ÇíËøî„Åô„Åü„ÇÅ„ÄÅ„Ç®„É©„ÉºÔºàÂÜçÁîü„Éñ„É≠„ÉÉ„ÇØ„Å™„Å©Ôºâ„ÇíÊçïÊçâ„Åß„Åç„Åæ„Åô
        if (playPromise !== undefined) {
            playPromise.catch(error => {
                console.error("„Çµ„Ç¶„É≥„Éâ„ÅÆÂÜçÁîü„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:", error);
                // üí° ÂÜçÁîü„Å´Â§±Êïó„Åó„ÅüÂ†¥ÂêàÔºà„Éü„É•„Éº„Éà„ÇÑ„Éñ„É≠„ÉÉ„ÇØÊôÇÔºâ„ÄÅ„É¶„Éº„Ç∂„Éº„Å´„ÇØ„É™„ÉÉ„ÇØ„Çí‰øÉ„Åô„Å™„Å©„ÅÆÂØæÂá¶„ÅåÂøÖË¶Å
            });
        }
    }

    function stop(element) {
        // ÂÜçÁîü„ÇíÂÅúÊ≠¢
        element.pause();

        // „É´„Éº„Éó„ÇíÁÑ°Âäπ„Å´Êàª„Åô
        element.loop = false;

        // Ôºà„Ç™„Éó„Ç∑„Éß„É≥ÔºâÂÜçÁîü‰ΩçÁΩÆ„ÇíÂÖàÈ†≠„Å´Êàª„Åô
        element.currentTime = 0;
    }
});